// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file Image.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _SENSOR_MSGS_IMAGE_HPP_
#define _SENSOR_MSGS_IMAGE_HPP_


#include "../topic.hpp"

#include "../std_msgs/Header.hpp"

namespace sensor_msgs {


class Image : public ros2::Topic<Image>
{
public: 
    std_msgs::Header header;
    uint32_t height;
    uint32_t width;
    char encoding[255];
    uint8_t is_bigendian;
    uint32_t step;
    uint8_t* data;
    uint32_t data_size;
    uint32_t data_array_capacity;

  Image():
    Topic("sensor_msgs::msg::dds_::Image_", "Image", SENSOR_MSGS_IMAGE_ID),
    header(),
    height(0), width(0), is_bigendian(0), step(0),
    data(nullptr), data_size(0), data_array_capacity(0)
  { 
    memset(encoding, 0, sizeof(encoding));
  }

  bool serialize(void* msg_buf, const Image* topic)
  {
    ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
    (void) header.serialize(writer, &topic->header);
    (void) ucdr_serialize_uint32_t(writer, topic->height);
    (void) ucdr_serialize_uint32_t(writer, topic->width);
    (void) ucdr_serialize_string(writer, topic->encoding);
    (void) ucdr_serialize_uint8_t(writer, topic->is_bigendian);
    (void) ucdr_serialize_uint32_t(writer, topic->step);
    (void) ucdr_serialize_sequence_uint8_t(writer, topic->data, topic->data_size);

    return !writer->error;
  }

  bool deserialize(void* msg_buf, Image* topic)
  {
    ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
    (void) header.deserialize(reader, &topic->header);
    (void) ucdr_deserialize_uint32_t(reader, &topic->height);
    (void) ucdr_deserialize_uint32_t(reader, &topic->width);
    (void) ucdr_deserialize_string(reader, topic->encoding, sizeof(topic->encoding));
    (void) ucdr_deserialize_uint8_t(reader, &topic->is_bigendian);
    (void) ucdr_deserialize_uint32_t(reader, &topic->step);
    (void) ucdr_deserialize_sequence_uint8_t(reader, topic->data, topic->data_array_capacity, &topic->data_size);

    return !reader->error;
  }

  uint32_t size_of_topic(const Image* topic, uint32_t size)
  {
    uint32_t previousSize = size;
    size += header.size_of_topic(&topic->header, size);

    size += ucdr_alignment(size, 4) + 4;
    size += ucdr_alignment(size, 4) + 4;

    size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->encoding) + 1);

    size += ucdr_alignment(size, 1) + 1;
    size += ucdr_alignment(size, 4) + 4;

    size += ucdr_alignment(size, 4) + 4;
    size += ucdr_alignment(size, 4) + (topic->data_size * 1);

    return size - previousSize;
  }

};

} // namespace sensor_msgs


#endif // _SENSOR_MSGS_IMAGE_HPP_
